#################################
# calibration.py		#
# calibration file to run	#
# as a first time setup or 	#
# or when changing bowls.	#
# built in data redundancy	#
# with json file in case 	#
# of data loss			#
#				#
# written by: Rash Kader	#
#	      Wesley Crank	#
#	      Na Ly		#
#	      Noah Fuji		#
#################################

#!/usr/bin/python
import os
import ADC
import datetime
from time import sleep
from configparser import ConfigParser as cp

#define global variables
avg = 0
channel = 0
section = ''
selection = ''
readingsList = []
feedingTimes = ['0','0','0','0']

#create configparser object
config_ini = cp()
config_ini.read('./config.ini')

#function to populate readingsList
#runs ADC.voltageConvert and ADC.adcMeasure to get ADC readings
#list must be list
#channel must be int from 0-1
#10 readings per second for 5 seconds
def readings (list, channel):
	for x in range (0,50):
		list.append(ADC.adcMeasure(channel))
		sleep(.1)
		return list

#function to find avg of a list of ints
def listAvg (list):
	return sum(list) / len(list)

#function to populate config.ini with average values taken from readings
#section and setting must be str
#channel must be int from 0-7
#def writeConfig (channel, section, setting):
#	readings(readingsList, channel)
#	#print (list)
#	config_ini[section][setting] = str(int(listAvg(readingsList)))
#	readingsList.clear()
def writeConfig (section, setting, value):
	config_ini[section][setting] = str(value)

#function to commit changes to config.ini
def commitChanges():
	with open('./config.ini', 'w') as config_file:
		config_ini.write(config_file)

def messageLoop(n):
	global feedingTimes
	nth = ''
	timeStr = ''
	x = 0
	for y in range (0,n):
		os.system('clear')
		if x == 0: nth = 'first'
		if x == 1: nth = 'second'
		if x == 2: nth = 'third'
		if x == 3: nth = 'fourth'
		print ("""
**********************************
 Enter the {} time		 *
 Format: HH:MMpm		 *
				 *
**********************************
		""".format(nth))
		timeStr = input('Time: ')
		timeStr = timeStr.replace(' ','')
		timeStr = timeStr.upper()
		feedingTimes[x] = timeStr
		x += 1

#function to reset config.ini settings to 0
#section and setting must be str
def resetConfig (section, setting):
	config_ini[section][setting] = '0'

def clear():
	os.system('clear')

def menu():
	global selection
	clear()
	print('''
**********************************
 Welcome to weight calibration.  *
 please make a selection.        *
			         *
 1. Water bowl calibration       *
 2. Food bowl calibration 	 *
 3. Enter timing information	 *
 4. Reset config file		 *
 5. Exit			 *
**********************************
	''')
	selection = input('Selection: ')
#menu
while selection != '5':

#	os.system('clear')
#	print(''
#**********************************
# Welcome to weight calibration.  *
# please make a selection.        *
#			         *
# 1. Water bowl calibration       *
# 2. Food bowl calibration 	 *
# 3. Enter timing information	 *
# 4. Reset config file		 *
# 5. Exit			 *
#**********************************
#	''')

	menu()
	if selection == '1':
		section = 'WATERBOWL'
		channel = 0
		#asks user to place empty bowl on water FSR, then waits for user to press Enter
		#runs function to write avg value to config.ini file
		a = input('Please place your empty water bowl on the sensor then press Enter.')
		avg = listAvg(readings(readingsList, channel))
		writeConfig(section, 'empty_bowl', avg)
		readingsList.clear()

		#asks user to fill bowl to a low level, then waits for user to press Enter
		#same as above
		a = input('Please fill your bowl to a low level then press Enter.')
		avg = listAvg(readings(readingsList, channel))
		writeConfig(section, 'low_water', avg)
		readingsList.clear()

		#asks user to fill bowl to full level, then waits for user to press Enter
		#same as above
		a = input('Please fill your bowl to full level then press Enter.')
		avg = listAvg(readings(readingsList, channel))
		writeConfig(section, 'full_bowl', avg)
		readingsList.clear()

		commitChanges()

	if selection == '2':
		section = 'FOODBOWL'
		channel = 1
		#asks user to place empty bowl on food FSR, waits for user to press Enter
		#runs function to write avg value to config.ini file
		a = input('Please place your empty food bowl on the sensor then press Enter.')
		avg = listAvg(readings(readingsList, channel))
		writeConfig(section, 'empty_bowl', avg)
		readingsList.clear()

		#asks user to fill bowl to full level, waits for user to press Enter
		#writes to config.ini
		a = input('Please fill your bowl to full level then press Enter.')
		avg = listAvg(readings(readingsList, channel))
		writeConfig(section, 'full_bowl', avg)
		readingsList.clear()

		commitChanges()

	if selection == '3':
		clear()
		section = 'TIMING'
		print ("""
**********************************
 How often would you like the	 *
 system to check the water level?*
				 *
**********************************
 		""")
		time = int(input('Minutes: '))
		time = time * 60
		writeConfig(section,'water_bowl_polling',time)
		sleep(.5)
		os.system('clear')

		print ("""
**********************************
 How many times per day would 	 *
 you like the feeder to run?	 *
				 *
**********************************
		""")
		n = int(input('1-4: '))

#		while (n < 1 or n > 4):
#			n = int(input('please enter a number between 1 and 4: ')

		messageLoop(n)
		for x in feedingTimes:
			setting = ''
			y = 0
			if y == 0: setting = 'food_timer1'
			if y == 1: setting = 'food_timer2'
			if y == 2: setting = 'food_timer3'
			if y == 3: setting = 'food_timer4'
			writeConfig(section,setting,feedingTimes[y])
			y += 1

		commitChanges()

	if selection == '4':
		clear()
		resetConfig('WATERBOWL','empty_bowl')
		resetConfig('WATERBOWL','low_water')
		resetConfig('WATERBOWL','full_bowl')
		resetConfig('FOODBOWL','empty_bowl')
		resetConfig('FOODBOWL','full_bowl')
		print ('config.ini reset to defaults')

		commitChanges()
